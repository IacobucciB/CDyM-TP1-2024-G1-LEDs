
tp1-ent.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  000001ee  00000282  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ee  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800102  00800102  00000284  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000284  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000038  00000000  00000000  000002f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000008a9  00000000  00000000  0000032c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000736  00000000  00000000  00000bd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000039f  00000000  00000000  0000130b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000078  00000000  00000000  000016ac  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000043a  00000000  00000000  00001724  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000257  00000000  00000000  00001b5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000028  00000000  00000000  00001db5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee ee       	ldi	r30, 0xEE	; 238
  7c:	f1 e0       	ldi	r31, 0x01	; 1
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 30       	cpi	r26, 0x02	; 2
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e0       	ldi	r26, 0x02	; 2
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a4 30       	cpi	r26, 0x04	; 4
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  9e:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <RawKeyPressed>:
#define PRESS_MSEC	 10	// Tiempo estable antes de registrarse presionado
#define RELEASE_MSEC 10	// Tiempo estable antes de registrarse liberado
// Leer el estado del Hardware
bool_t RawKeyPressed()
{
	return (PINC & (1<<PINC0)); // Corrected reading of PINC0
  a6:	86 b1       	in	r24, 0x06	; 6
}
  a8:	81 70       	andi	r24, 0x01	; 1
  aa:	08 95       	ret

000000ac <DebouncedKeySwitch>:
// Esto mantiene el estado antirrebote del boton
bool_t DebouncedKeyPress = false;
// Funcion llamada cada CHECK_MSEC para el antirrebote
void DebouncedKeySwitch(bool_t *Key_changed, bool_t *Key_pressed)
{
  ac:	0f 93       	push	r16
  ae:	1f 93       	push	r17
  b0:	cf 93       	push	r28
  b2:	df 93       	push	r29
  b4:	8c 01       	movw	r16, r24
  b6:	eb 01       	movw	r28, r22
	static uint8_t Count = RELEASE_MSEC / CHECK_MSEC;
	bool_t RawState;
	*Key_changed = false;
  b8:	fc 01       	movw	r30, r24
  ba:	10 82       	st	Z, r1
	*Key_pressed = DebouncedKeyPress;
  bc:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DebouncedKeyPress>
  c0:	88 83       	st	Y, r24
	RawState = RawKeyPressed();
  c2:	0e 94 53 00 	call	0xa6	; 0xa6 <RawKeyPressed>
	if (RawState == DebouncedKeyPress)
  c6:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <DebouncedKeyPress>
  ca:	89 13       	cpse	r24, r25
  cc:	0a c0       	rjmp	.+20     	; 0xe2 <DebouncedKeySwitch+0x36>
	{
		// Set the timer which allows a change from current state
		if (DebouncedKeyPress)
  ce:	99 23       	and	r25, r25
  d0:	21 f0       	breq	.+8      	; 0xda <DebouncedKeySwitch+0x2e>
		{
			Count = RELEASE_MSEC / CHECK_MSEC;
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  d8:	1e c0       	rjmp	.+60     	; 0x116 <DebouncedKeySwitch+0x6a>
		}
		else
		{
			Count = PRESS_MSEC / CHECK_MSEC;
  da:	82 e0       	ldi	r24, 0x02	; 2
  dc:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
  e0:	1a c0       	rjmp	.+52     	; 0x116 <DebouncedKeySwitch+0x6a>
		}
	}
	else
	{
		// Key has changed - wait for new state to become stable
		if (--Count == 0)
  e2:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__data_start>
  e6:	91 50       	subi	r25, 0x01	; 1
  e8:	90 93 00 01 	sts	0x0100, r25	; 0x800100 <__data_start>
  ec:	91 11       	cpse	r25, r1
  ee:	13 c0       	rjmp	.+38     	; 0x116 <DebouncedKeySwitch+0x6a>
		{
			// Timer expired - accept change
			DebouncedKeyPress = RawState;
  f0:	80 93 03 01 	sts	0x0103, r24	; 0x800103 <DebouncedKeyPress>
			*Key_changed = true;
  f4:	81 e0       	ldi	r24, 0x01	; 1
  f6:	f8 01       	movw	r30, r16
  f8:	80 83       	st	Z, r24
			*Key_pressed = DebouncedKeyPress;
  fa:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DebouncedKeyPress>
  fe:	88 83       	st	Y, r24
			// Reset the timer
			if (DebouncedKeyPress)
 100:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <DebouncedKeyPress>
 104:	88 23       	and	r24, r24
 106:	21 f0       	breq	.+8      	; 0x110 <DebouncedKeySwitch+0x64>
			{
				Count = RELEASE_MSEC / CHECK_MSEC;
 108:	82 e0       	ldi	r24, 0x02	; 2
 10a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
 10e:	03 c0       	rjmp	.+6      	; 0x116 <DebouncedKeySwitch+0x6a>
			}
			else
			{
				Count = PRESS_MSEC / CHECK_MSEC;
 110:	82 e0       	ldi	r24, 0x02	; 2
 112:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
			}
		}
	}
}
 116:	df 91       	pop	r29
 118:	cf 91       	pop	r28
 11a:	1f 91       	pop	r17
 11c:	0f 91       	pop	r16
 11e:	08 95       	ret

00000120 <press_detect>:

// Función para detectar pulsaciones de botón basada en un mecanismo de debounce.
char press_detect(char debounce)
{
	static char old_debounce;
	if (debounce != old_debounce)
 120:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <__data_end>
 124:	98 17       	cp	r25, r24
 126:	31 f0       	breq	.+12     	; 0x134 <press_detect+0x14>
	{
		old_debounce = debounce;
 128:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__data_end>
		if(debounce == 0)
 12c:	81 11       	cpse	r24, r1
 12e:	04 c0       	rjmp	.+8      	; 0x138 <press_detect+0x18>
		{
			return 1;
 130:	81 e0       	ldi	r24, 0x01	; 1
 132:	08 95       	ret
		}
	}
	return 0;
 134:	80 e0       	ldi	r24, 0x00	; 0
 136:	08 95       	ret
 138:	80 e0       	ldi	r24, 0x00	; 0
}
 13a:	08 95       	ret

0000013c <main>:

int main (void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	00 d0       	rcall	.+0      	; 0x142 <main+0x6>
 142:	cd b7       	in	r28, 0x3d	; 61
 144:	de b7       	in	r29, 0x3e	; 62
	/* Setup */
	DDRC &=~(1<<PC0); // Establece el puerto PORTC0 como entrada (0) y deja los 7 restantes sin cambios
 146:	87 b1       	in	r24, 0x07	; 7
 148:	8e 7f       	andi	r24, 0xFE	; 254
 14a:	87 b9       	out	0x07, r24	; 7
	PORTC |= 1<<PORTC0;	// Seteo el PORTC0 con pull-up
 14c:	88 b1       	in	r24, 0x08	; 8
 14e:	81 60       	ori	r24, 0x01	; 1
 150:	88 b9       	out	0x08, r24	; 8
	DDRB = 0xFF; // Establece todo los bits del Puerto B como salida. b0 y b7 – b1 y b6 – b2 y b5 – b3 y b4
 152:	8f ef       	ldi	r24, 0xFF	; 255
 154:	84 b9       	out	0x04, r24	; 4
	unsigned char secuencia = 1; // Guardar en que secuencia se encuentra el programa
	PORTB = 0b10000001; // La primera secuencia es LEDs hacia el centro
 156:	81 e8       	ldi	r24, 0x81	; 129
 158:	85 b9       	out	0x05, r24	; 5
{
	/* Setup */
	DDRC &=~(1<<PC0); // Establece el puerto PORTC0 como entrada (0) y deja los 7 restantes sin cambios
	PORTC |= 1<<PORTC0;	// Seteo el PORTC0 con pull-up
	DDRB = 0xFF; // Establece todo los bits del Puerto B como salida. b0 y b7 – b1 y b6 – b2 y b5 – b3 y b4
	unsigned char secuencia = 1; // Guardar en que secuencia se encuentra el programa
 15a:	11 e0       	ldi	r17, 0x01	; 1
	bool_t key_pressed;	// Variables que guardaran los cambios del boton con el algoritmo antirrebote
	
	/* Loop */
	while(1)
	{
		DebouncedKeySwitch(&key_changed, &key_pressed);
 15c:	be 01       	movw	r22, r28
 15e:	6e 5f       	subi	r22, 0xFE	; 254
 160:	7f 4f       	sbci	r23, 0xFF	; 255
 162:	ce 01       	movw	r24, r28
 164:	01 96       	adiw	r24, 0x01	; 1
 166:	0e 94 56 00 	call	0xac	; 0xac <DebouncedKeySwitch>
		if (press_detect(key_pressed))
 16a:	8a 81       	ldd	r24, Y+2	; 0x02
 16c:	0e 94 90 00 	call	0x120	; 0x120 <press_detect>
 170:	88 23       	and	r24, r24
 172:	69 f0       	breq	.+26     	; 0x18e <main+0x52>
		{
			secuencia = !secuencia;
 174:	81 e0       	ldi	r24, 0x01	; 1
 176:	11 11       	cpse	r17, r1
 178:	80 e0       	ldi	r24, 0x00	; 0
			PORTB = 0x00;
 17a:	15 b8       	out	0x05, r1	; 5
			if (secuencia)
 17c:	11 11       	cpse	r17, r1
 17e:	04 c0       	rjmp	.+8      	; 0x188 <main+0x4c>
			{
				PORTB = 0b10000001; // Establece los LEDs para iniciar la secuencia hacia el centro
 180:	91 e8       	ldi	r25, 0x81	; 129
 182:	95 b9       	out	0x05, r25	; 5
	while(1)
	{
		DebouncedKeySwitch(&key_changed, &key_pressed);
		if (press_detect(key_pressed))
		{
			secuencia = !secuencia;
 184:	18 2f       	mov	r17, r24
 186:	03 c0       	rjmp	.+6      	; 0x18e <main+0x52>
			{
				PORTB = 0b10000001; // Establece los LEDs para iniciar la secuencia hacia el centro
			}
			else
			{
				PORTB = 0b00000001; // Establece los LEDs para iniciar la secuencia descendente
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	95 b9       	out	0x05, r25	; 5
	while(1)
	{
		DebouncedKeySwitch(&key_changed, &key_pressed);
		if (press_detect(key_pressed))
		{
			secuencia = !secuencia;
 18c:	18 2f       	mov	r17, r24
				PORTB = 0b00000001; // Establece los LEDs para iniciar la secuencia descendente
			}
		}
		
		
		if (secuencia)
 18e:	11 23       	and	r17, r17
 190:	c9 f0       	breq	.+50     	; 0x1c4 <main+0x88>
		{
			// b0 y b7 – b1 y b6 – b2 y b5 – b3 y b4
			if (PORTB == 0b00011000) // Si esta en el final de la secuencia vuelvo a arrancarla
 192:	85 b1       	in	r24, 0x05	; 5
 194:	88 31       	cpi	r24, 0x18	; 24
 196:	19 f4       	brne	.+6      	; 0x19e <main+0x62>
			{
				PORTB = 0b10000001;
 198:	81 e8       	ldi	r24, 0x81	; 129
 19a:	85 b9       	out	0x05, r24	; 5
 19c:	09 c0       	rjmp	.+18     	; 0x1b0 <main+0x74>
			}
			else
			{
				// Rotar 0-3 a la izquierda y 4-7 a derecha afuera hacia adentro
				P0_3 = PORTB & 0b00001111; // Tomo los valores de los primeros 4
 19e:	85 b1       	in	r24, 0x05	; 5
 1a0:	8f 70       	andi	r24, 0x0F	; 15
				P0_3 = P0_3 << 1; // Roto hacia la izquierda
 1a2:	98 2f       	mov	r25, r24
 1a4:	99 0f       	add	r25, r25
				
				
				P4_7 = PORTB & 0b11110000; // Tomo los valores de los ultimos 4
 1a6:	85 b1       	in	r24, 0x05	; 5
 1a8:	80 7f       	andi	r24, 0xF0	; 240
				P4_7 = P4_7 >> 1; // Roto hacia la derecha
 1aa:	86 95       	lsr	r24
				
				PORTB = P0_3 | P4_7; // Realizo un OR entre los rotados para asignarlo a PORTB
 1ac:	89 2b       	or	r24, r25
 1ae:	85 b9       	out	0x05, r24	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b0:	2f ef       	ldi	r18, 0xFF	; 255
 1b2:	81 ee       	ldi	r24, 0xE1	; 225
 1b4:	94 e0       	ldi	r25, 0x04	; 4
 1b6:	21 50       	subi	r18, 0x01	; 1
 1b8:	80 40       	sbci	r24, 0x00	; 0
 1ba:	90 40       	sbci	r25, 0x00	; 0
 1bc:	e1 f7       	brne	.-8      	; 0x1b6 <main+0x7a>
 1be:	00 c0       	rjmp	.+0      	; 0x1c0 <main+0x84>
 1c0:	00 00       	nop
 1c2:	cc cf       	rjmp	.-104    	; 0x15c <main+0x20>
		}
		else
		{
			
			// b7-b6-b5-b4-b3-b2-b1-b0.
			if (PORTB == 0b10000000) // Si esta en el final de la secuencia vuelvo a arrancarla
 1c4:	85 b1       	in	r24, 0x05	; 5
 1c6:	80 38       	cpi	r24, 0x80	; 128
 1c8:	19 f4       	brne	.+6      	; 0x1d0 <main+0x94>
			{
				PORTB = 0b00000001;
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	85 b9       	out	0x05, r24	; 5
 1ce:	03 c0       	rjmp	.+6      	; 0x1d6 <main+0x9a>
			}
			else
			{
				P0_7 = 0b00000001;
				P0_7 = PORTB << 1; // Roto hacia la izquierda de forma sucesiva un solo bit
 1d0:	85 b1       	in	r24, 0x05	; 5
 1d2:	88 0f       	add	r24, r24

				PORTB = P0_7; // Lo asigno a PORTB
 1d4:	85 b9       	out	0x05, r24	; 5
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	81 ee       	ldi	r24, 0xE1	; 225
 1da:	94 e0       	ldi	r25, 0x04	; 4
 1dc:	21 50       	subi	r18, 0x01	; 1
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0xa0>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0xaa>
 1e6:	00 00       	nop
 1e8:	b9 cf       	rjmp	.-142    	; 0x15c <main+0x20>

000001ea <_exit>:
 1ea:	f8 94       	cli

000001ec <__stop_program>:
 1ec:	ff cf       	rjmp	.-2      	; 0x1ec <__stop_program>
